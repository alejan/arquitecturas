#!/usr/bin/env node

/**
  * Module dependencies.
 */
var nr = require('newrelic');
var cluster = require('cluster');
var sticky = require('sticky-session');
var app = require('../app');
var debug = require('debug')('test:server');
//var http = require('http');
var https = require('https');
var fs = require('fs');

const numCPUs = require('os').cpus().length;



var sslkey = fs.readFileSync('certs/key.pem');
var sslcert = fs.readFileSync('certs/cert.pem');

if (false/*cluster.isMaster*/) {
  //  console.log('Master cluster setting up ' + numCPUs + ' workers...');
  // // Fork workers.
  // for (var i = 0; i < numCPUs; i++) {
  //   cluster.fork();
  // }
  //
  //  cluster.on('online', function(worker) {
  //       console.log('Worker ' + worker.process.pid + ' is online');
  //   });
  //
  // cluster.on('exit', (worker, code, signal) => {
  //   console.log(`worker ${worker.process.pid} died`);
	// cluster.fork();
  // });
} else {
	  // Workers can share any TCP connection
	  // In this case it is an HTTP server

	/**
	 * Get port from environment and store in Express.
	 */

	var port = normalizePort(process.env.PORT || '3000');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	var server = https.createServer({
		key: sslkey,
	 	cert: sslcert
	},app);

  if (!sticky.listen(server, port)) {
    // Master code
    server.once('listening', function() {
      console.log('server started on port: ' + port);
    });
    console.log('Master cluster setting up ' + numCPUs + ' workers...');
    // Fork workers.
    for (var i = 0; i < numCPUs; i++) {
     cluster.fork();
    }

    cluster.on('online', function(worker) {
         console.log('Worker ' + worker.process.pid + ' is online');
     });

    cluster.on('exit', function(worker, code, signal) {
    	//console.log(`worker ${worker.process.pid} died`);
    	cluster.fork();
    });
    return;

  } else {
    // Worker code
  }

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	//server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	// =================================================================
	// Sockets =============================================
	// =================================================================
	var io = require('socket.io')(server);	//Binds socket to http server
	var socket1 = require("../sockets/socket1").init(io);

	//Notificacion adicional
	console.log('App runing in por: ' + port);

	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
	  var port = parseInt(val, 10);

	  if (isNaN(port)) {
		// named pipe
		return val;
	  }

	  if (port >= 0) {
		// port number
		return port;
	  }

	  return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
	  if (error.syscall !== 'listen') {
		throw error;
	  }

	  var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	  // handle specific listen errors with friendly messages
	  switch (error.code) {
		case 'EACCES':
		  console.error(bind + ' requires elevated privileges');
		  process.exit(1);
		  break;
		case 'EADDRINUSE':
		  console.error(bind + ' is already in use');
		  process.exit(1);
		  break;
		default:
		  throw error;
	  }
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
	  var addr = server.address();
	  var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	  debug('Listening on ' + bind);
	}
}
